= Whats new in Version 3.0 =

== Compatibility changes to Version 2.0.2 ==

 * The syntax of the minifier configuration was changed. See: [WhatsNewVersion30#New_configuration New configuration]

== OOP ==
!CssMin version 3 is a object orientated implementation of version 2. This fixes the major problem (at least for me) 
of version 2: the maintainability. Also version 3 should be less error-prone and has a much better expandability.

=== But there is always a price to pay ===
While the parser have the same speed as in version 2 the memory usage will be higher and the minification is ca. 20% 
slower (with all configuration options turned on).

=== Filters and plugins ===
Parser plugins encapsules the parse logic for different elements of the stylesheet. Parser plugins are using the parser 
methods to change the parser state, buffer, etc. and return values for flow control of the parser process. 

Minifier filter are used for pre-processing the array of tokens returned by the parser while minifier plugins getting 
called on every token of the array of token returned by the parser. Minifier filters are able to insert, edit and remove 
tokens; minifier plugins not. Both are using return values for flow control of the minification process.

=== Source and build version ===
The build version is a single file containing every php file of the source as minified version. The source version includes a autoload method that will get registered via [http://www.php.net/manual/en/function.spl-autoload-register.php spl_autoload_register]

== New configuration ==

The configuration is now seperated into filter and plugin configuration. The configuration array uses the name of the 
filter/plugin as key and if the value is set to `true` or an array the filter/plugin is enabled. If the value is set to `false`
the filter/plugin is disabled.

Example with all filters and plugins activated and configured:
{{{
$filters = array
	(
	"ImportImports"				=> array("BasePath" => "path/to/base/path"),
	"RemoveComments"			=> true, 
	"RemoveEmptyRulesets"			=> true,
	"RemoveEmptyAtBlocks"			=> true,
	"ConvertLevel3Properties"		=> true,
	"Variables"				=> true,
	"RemoveLastDelarationSemiColon"		=> true // Required to run as last filter
	);
$plugins = array
	(
	"Variables"				=> true,
	"ConvertFontWeight"			=> true,
	"ConvertHslColors"			=> true,
	"ConvertRgbColors"			=> true,
	"ConvertNamedColors"			=> true,
	"CompressColorValues"			=> true,
	"CompressUnitValues"			=> true,
	"CompressExpressionValues"		=> true
	);
$styles = CssMin::minify(file_get_contents("path/to/source.css"), $filters, $plugins);
}}}

The default configuration is:
{{{
$filters = array
	(
	"ImportImports"				=> false,
	"RemoveComments"			=> true, 
	"RemoveEmptyRulesets"			=> true,
	"RemoveEmptyAtBlocks"			=> true,
	"ConvertLevel3Properties"		=> false,
	"Variables"				=> true,
	"RemoveLastDelarationSemiColon"		=> true // Required to run as last filter
	);
$plugins = array
	(
	"Variables"				=> true,
	"ConvertFontWeight"			=> false,
	"ConvertHslColors"			=> false,
	"ConvertRgbColors"			=> false,
	"ConvertNamedColors"			=> false,
	"CompressColorValues"			=> false,
	"CompressUnitValues"			=> false,
	"CompressExpressionValues"		=> false
	);
}}}

== Variables now can get used as part of a declaration value ==

{{{
@variables
	{
	/* Variable declaration */
	myVar: black;
	}
div.Test2
	{
	/* Variable used as part of a declaration value */
	border: 1px solid var(myVar);
	}
}}}

== Parser for expression() declaration values ==

expresssion() declaration values will get parsed property even if the expression includes curly braces and semicolons.
Additional if [https://github.com/rgrove/jsmin-php/ JSMin] is defined the expression will get compressed using 
[https://github.com/rgrove/jsmin-php/ JSMin].

== Formatters ==
For debugging purposes two formatter are included. The formatter will output a array of tokens with correct indentation
(and a optional declaration value padding). The formatters are:
 * [http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS OTBS (aka. 1TBS)] indent style
 * [http://en.wikipedia.org/wiki/Indent_style#Whitesmiths_style Whitesmiths] indent style

Using the formatter:
{{{
$tokens = CssMin::parse(file_get_contents("path/to/source.css"));
$formatter = new CssWhitesmithsFormatter($tokens, "    ", 32);
echo "<pre>";
echo $formatter;
echo "</pre>
}}}