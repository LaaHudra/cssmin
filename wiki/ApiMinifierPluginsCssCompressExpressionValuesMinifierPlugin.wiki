#sidebar Sidebar

== _class_ !CssCompressExpressionValuesMinifierPlugin _extends_ [ApiMinifierPluginsACssMinifierPlugin aCssMinifierPlugin] ==
This [ApiMinifierPluginsACssMinifierPlugin minifier plugin] compress expression() declaration values found in 
[ApiTokensCssAtFontFaceDeclarationToken CssAtFontFaceDeclarationToken],
[ApiTokensCssAtPageDeclarationToken CssAtPageDeclarationToken] and [ApiTokensCssRulesetDeclarationToken CssRulesetDeclarationToken].

This plugin requires the libary [https://github.com/rgrove/jsmin-php/ JSMin]. JSMin have to be already included or must 
be loadable via [@link http://goo.gl/JrW54 PHP autoloading]. If JSMin is not defined expression() declaration values won't 
get compressed and NO error will get triggered.

*Example:*
{{{
width: expression( Math.round( Math.random() * 100 ) + "px");
}}}

*Will get compressed to:*
{{{
width:expression(Math.round(Math.random()*100)+"px");
}}}


----

=== Properties ===
==== _protected_ `array` [ApiMinifierPluginsACssMinifierPlugin aCssMinifierPlugin::$configuration] = array() ====
The plugin configuration.
----

==== _protected_ [ApiMinifierCssMinifier CssMinifier] [ApiMinifierPluginsACssMinifierPlugin aCssMinifierPlugin::$minifier] = `null` ====
Instance of the [ApiMinifierCssMinifier CssMinifier] of the filter.
----
	
=== Methods ===
==== `void` _public_ [ApiMinifierPluginsACssMinifierPlugin aCssMinifierPlugin::__construct]([ApiMinifierCssMinifier CssMinifier] $minifier, `array` $configuration = array()) ====
Constructor setting the instance of [ApiMinifierCssMinifier CssMinifier] and the plugin configuration.
 * [ApiMinifierCssMinifier CssMinifier] $minifier : Instance of the [ApiMinifierCssMinifier CssMinifier]
 * `array` $configuration : Filter configuration (optional)
 * *Returns:* `void`
----

==== `boolean` _public_ apply(`array` &$token) ====
Implements [ApiMinifierPluginsACssMinifierPlugin#Methods aCssMinifierPlugin::apply()].

Applys the plugin logic on the [ApiTokensACssToken token].

 * `array` &$token : [ApiTokensACssToken token]
  * *Returns:* `boolean` `true to continue with the next token, `false` to hand over the current token to the next plugin
----

==== `array` _public_ getTriggerTokens() ====
Implements [ApiMinifierPluginsACssMinifierPlugin#Methods aCssMinifierPlugin::getTriggerTokens()].

Returns an array with token class names the plugin have to get called on. This avoids unnessasary calls to the plugin. This
plugin will return:

{{{
array
	(
	"CssAtFontFaceDeclarationToken",
	"CssAtPageDeclarationToken",
	"CssRulesetDeclarationToken"
	);
}}}
 * *Returns:* `array` Array of token class name this plugin will trigger on
----
